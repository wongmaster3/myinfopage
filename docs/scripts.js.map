{"version":3,"sources":["src/assets/js/main-dev.js"],"names":[],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uEAAuE;;AAEvE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA,yBAAyB,uBAAuB;AAChD;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iEAAiE;AACxG,GAAG;;AAEH;AACA;AACA,GAAG;AACH","file":"scripts.js","sourcesContent":["/* The MIT License (MIT)\n\nCopyright (c) 2015 Juha Lindstedt\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nhttps://github.com/pakastin/nodegarden\n*/\n\n'use strict';\n\nfunction loadNodeGarden() {\n  'use strict';\n\n  function defined(a, b) {\n    return a != null ? a : b;\n  }\n\n  function Node(garden) {\n    this.garden = garden;\n    this.reset();\n  }\n\n  Node.prototype.reset = function () {\n    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    var x = _ref.x;\n    var y = _ref.y;\n    var vx = _ref.vx;\n    var vy = _ref.vy;\n    var m = _ref.m;\n\n    this.x = defined(x, Math.random() * this.garden.width);\n    this.y = defined(y, Math.random() * this.garden.height);\n    this.vx = defined(vx, Math.random() * 0.5 - 0.25);\n    this.vy = defined(vy, Math.random() * 0.5 - 0.25);\n    this.m = defined(m, Math.random() * 2.5 + 0.5);\n  };\n\n  Node.prototype.addForce = function (force, direction) {\n    this.vx += force * direction.x / this.m;\n    this.vy += force * direction.y / this.m;\n  };\n\n  Node.prototype.distanceTo = function (node) {\n    var x = node.x - this.x;\n    var y = node.y - this.y;\n    var total = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n\n    return { x: x, y: y, total: total };\n  };\n\n  Node.prototype.update = function () {\n    this.x += this.vx;\n    this.y += this.vy;\n\n    if (this.x > this.garden.width + 50 || this.x < -50 || this.y > this.garden.height + 50 || this.y < -50) {\n      // if node over screen limits - reset to a init position\n      this.reset();\n    }\n  };\n\n  Node.prototype.squaredDistanceTo = function (node) {\n    return (node.x - this.x) * (node.x - this.x) + (node.y - this.y) * (node.y - this.y);\n  };\n\n  Node.prototype.collideTo = function (node) {\n    node.vx = node.m * node.vx / (this.m + node.m) + this.m * this.vx / (this.m + node.m);\n    node.vy = node.m * node.vy / (this.m + node.m) + this.m * this.vy / (this.m + node.m);\n\n    this.reset();\n  };\n\n  Node.prototype.render = function () {\n    this.garden.ctx.beginPath();\n    this.garden.ctx.arc(this.x, this.y, this.getDiameter(), 0, 2 * Math.PI);\n    this.garden.ctx.fill();\n  };\n\n  Node.prototype.getDiameter = function () {\n    return this.m;\n  };\n\n  var pixelRatio$1 = window.devicePixelRatio;\n\n  function NodeGarden(container) {\n    this.nodes = [];\n    this.container = container;\n    this.canvas = document.createElement('canvas');\n    this.ctx = this.canvas.getContext('2d');\n    this.started = false;\n    this.nightmode = false;\n\n    window.addEventListener('mousedown', function (e) {\n      mouseNode.m = 15;\n    });\n\n    window.addEventListener('mouseup', function (e) {\n      mouseNode.m = 0;\n    });\n\n    if (pixelRatio$1 !== 1) {\n      // if retina screen, scale canvas\n      this.canvas.style.transform = 'scale(' + 1 / pixelRatio$1 + ')';\n      this.canvas.style.transformOrigin = '0 0';\n    }\n    this.canvas.id = 'nodegarden';\n\n    // Add mouse node\n    var mouseNode = new Node(this);\n    mouseNode.m = 0;\n\n    mouseNode.update = function () {};\n    mouseNode.reset = function () {};\n    mouseNode.render = function () {};\n    // Move coordinates to unreachable zone\n    mouseNode.x = Number.MAX_SAFE_INTEGER;\n    mouseNode.y = Number.MAX_SAFE_INTEGER;\n\n    document.addEventListener('mousemove', function (e) {\n      mouseNode.x = e.pageX * pixelRatio$1;\n      mouseNode.y = e.pageY * pixelRatio$1;\n    });\n\n    document.documentElement.addEventListener('mouseleave', function (e) {\n      mouseNode.x = Number.MAX_SAFE_INTEGER;\n      mouseNode.y = Number.MAX_SAFE_INTEGER;\n    });\n\n    this.nodes.unshift(mouseNode);\n\n    this.resize();\n    this.container.appendChild(this.canvas);\n  }\n\n  NodeGarden.prototype.start = function () {\n    if (!this.playing) {\n      this.playing = true;\n      this.render(true);\n    }\n  };\n\n  NodeGarden.prototype.stop = function () {\n    if (this.playing) {\n      this.playing = false;\n    }\n  };\n\n  NodeGarden.prototype.resize = function () {\n    this.width = window.innerWidth * pixelRatio$1;\n    this.height = $(\"#container\").height() * pixelRatio$1;\n    this.area = this.width * this.height;\n\n    // calculate nodes needed\n    this.nodes.length = Math.sqrt(this.area) / 25 | 0;\n\n    // set canvas size\n    this.canvas.width = this.width;\n    this.canvas.height = this.height;\n\n    if (this.nightMode) {\n      this.ctx.fillStyle = '#ffffff';\n    } else {\n      this.ctx.fillStyle = '#000000';\n    }\n\n    // create nodes\n    for (var i = 0; i < this.nodes.length; i++) {\n      if (this.nodes[i]) {\n        continue;\n      }\n      this.nodes[i] = new Node(this);\n    }\n  };\n\n  NodeGarden.prototype.toggleNightMode = function () {\n    this.nightMode = !this.nightMode;\n    if (this.nightMode) {\n      this.ctx.fillStyle = '#ffffff';\n      document.body.classList.add('nightmode');\n    } else {\n      this.ctx.fillStyle = '#000000';\n      document.body.classList.remove('nightmode');\n    }\n  };\n\n  NodeGarden.prototype.render = function (start) {\n    var _this = this;\n\n    if (!this.playing) {\n      return;\n    }\n\n    if (start) {\n      requestAnimationFrame(function () {\n        _this.render(true);\n      });\n    }\n\n    // clear canvas\n    this.ctx.clearRect(0, 0, this.width, this.height);\n\n    // update links\n    var nodeA, nodeB;\n    for (var i = 0; i < this.nodes.length - 1; i++) {\n      nodeA = this.nodes[i];\n      for (var j = i + 1; j < this.nodes.length; j++) {\n        nodeB = this.nodes[j];\n        var squaredDistance = nodeA.squaredDistanceTo(nodeB);\n\n        // calculate gravity force\n        var force = 3 * (nodeA.m * nodeB.m) / squaredDistance;\n\n        var opacity = force * 100;\n\n        if (opacity < 0.025) {\n          continue;\n        }\n\n        if (squaredDistance <= (nodeA.m / 2 + nodeB.m / 2) * (nodeA.m / 2 + nodeB.m / 2)) {\n          // collision: remove smaller or equal - never both of them\n          if (nodeA.m <= nodeB.m) {\n            nodeA.collideTo(nodeB);\n          } else {\n            nodeB.collideTo(nodeA);\n          }\n          continue;\n        }\n\n        var distance = nodeA.distanceTo(nodeB);\n\n        // calculate gravity direction\n        var direction = {\n          x: distance.x / distance.total,\n          y: distance.y / distance.total\n        };\n\n        // draw gravity lines\n        this.ctx.beginPath();\n        if (this.nightMode) {\n          this.ctx.strokeStyle = 'rgba(191,191,191,' + (opacity < 1 ? opacity : 1) + ')';\n        } else {\n          this.ctx.strokeStyle = 'rgba(63,63,63,' + (opacity < 1 ? opacity : 1) + ')';\n        }\n        this.ctx.moveTo(nodeA.x, nodeA.y);\n        this.ctx.lineTo(nodeB.x, nodeB.y);\n        this.ctx.stroke();\n\n        nodeA.addForce(force, direction);\n        nodeB.addForce(-force, direction);\n      }\n    }\n    // render and update nodes\n    for (i = 0; i < this.nodes.length; i++) {\n      this.nodes[i].render();\n      this.nodes[i].update();\n    }\n  };\n\n  var pixelRatio = window.devicePixelRatio;\n  var $container = document.getElementById(\"header\");\n  var nodeGarden = new NodeGarden($container);\n  // var $container2 = document.getElementById(\"project-container\");\n  // var nodeGarden2 = new NodeGarden($container2);\n  // start simulation\n  nodeGarden.start();\n  //nodeGarden2.start();\n\n\n  nodeGarden.toggleNightMode();\n\n  var resetNode = 0;\n  $container.addEventListener('click', function (e) {\n    resetNode++;\n    if (resetNode > nodeGarden.nodes.length - 1) {\n      resetNode = 1;\n    }\n    nodeGarden.nodes[resetNode].reset({ x: e.pageX * pixelRatio, y: e.pageY * pixelRatio, vx: 0, vy: 0 });\n  });\n\n  window.addEventListener('resize', function () {\n    nodeGarden.resize();\n  });\n}\n"],"sourceRoot":"webpack:///"}